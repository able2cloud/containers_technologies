1. Instalação da AWS CLI

Abra um terminal e execute o seguinte comando para instalar a AWS CLI:
sudo apt install awscli
Depois de instalar a AWS CLI, você precisa se autenticar com a sua conta da AWS. Para fazer isso, execute o seguinte comando:
aws configure
Siga as instruções no prompt para inserir suas credenciais da AWS.
2. Instalação do kubectl

Abra um terminal e execute o seguinte comando para instalar o kubectl:
sudo apt install kubectl
3. Configuração do kubectl para o cluster EKS

Abra um terminal e execute o seguinte comando para obter o arquivo de configuração do kubectl para o seu cluster EKS:
aws eks --region us-east-1 update-kubeconfig --name aula5-cluster
Depois de obter o arquivo de configuração, você precisa carregá-lo para o kubectl. Para fazer isso, execute o seguinte comando:
kubectl config use-context aula5-cluster
4. (Opcional) Instalação e configuração do Helm

O Helm é um gerenciador de pacotes para Kubernetes. Ele pode ser usado para instalar e gerenciar aplicativos Kubernetes de forma reproduzível.

Para instalar o Helm, abra um terminal e execute o seguinte comando:

curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
Depois de instalar o Helm, você precisa configurá-lo. Para fazer isso, execute o seguinte comando:
helm init
5. Subindo o Cluster de EKS

Use a AWS CLI para criar um cluster EKS na região North Virginia com 2 nós t3.medium.

Para criar um cluster EKS, abra um terminal e execute o seguinte comando:

aws eks create-cluster --region us-east-1 --name aula5-cluster --node-type t3.medium --nodes 2
Depois de criar o cluster EKS, ele pode levar alguns minutos para ser inicializado.
6. Trabalhando com Redes no Kubernetes

Um namespace é um recurso do Kubernetes que permite agrupar objetos relacionados. Por exemplo, você pode usar um namespace para agrupar todos os seus pods de desenvolvimento ou todos os seus pods de produção.

Para criar um namespace, abra um terminal e execute o seguinte comando:

kubectl create namespace aula5-namespace
Depois de criar um namespace, você pode ver seus pods nele usando o seguinte comando:
kubectl get pods --namespace aula5-namespace
7. Criação e explicação de um Network Policy

Um Network Policy é um recurso do Kubernetes que permite restringir o tráfego entre pods.

Para criar um Network Policy, abra um terminal e execute o seguinte comando:

kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: aula5-network-policy
spec:
  podSelector:
    matchLabels:
      app: aula5-app
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: aula5-database
EOF
Depois de criar um Network Policy, você pode ver suas regras usando o seguinte comando:
kubectl get networkpolicies
8. Gerenciando o Tráfego com Ingress

Um Ingress é um recurso do Kubernetes que permite rotear o tráfego para diferentes pods em um cluster.

Para instalar o Ingress Controller (Nginx), abra um terminal e execute o seguinte comando:

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.4/deploy/static/provider/aws/deploy.yaml

Depois de instalar o Ingress Controller (Nginx), você pode criar um Ingress Resource para direcionar o tráfego.

Para criar um Ingress Resource, abra um terminal e execute o seguinte comando:

kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aula5-ingress
spec:
  rules:
    - host: aula5-app.example.com
      http:
        paths:```



Gerenciamento de Configurações e Dados Sensíveis
Criação e uso de um Secret
Um Secret é um objeto Kubernetes que armazena dados confidenciais, como senhas, chaves SSH e certificados. Os Secrets são criptografados e não podem ser visualizados por usuários ou processos não autorizados.

Para criar um Secret, você pode usar o seguinte comando:

kubectl create secret generic <secret-name> --from-literal=key1=value1 --from-literal=key2=value2
Por exemplo, para criar um Secret chamado aula5-secret com dois valores, key1 e value1 e key2 e value2, você usaria o seguinte comando:

kubectl create secret generic aula5-secret --from-literal=key1=value1 --from-literal=key2=value2
Depois de criar um Secret, você pode usá-lo em um Pod definindo o volume secret para o Pod. O volume secret mapeia o Secret para um volume no Pod e o Pod pode acessar os dados do Secret usando o caminho do volume.

Por exemplo, o seguinte YAML define um Pod com um volume secret que mapeia o Secret aula5-secret para o volume /etc/secrets:

apiVersion: v1
kind: Pod
metadata:
  name: aula5-pod
spec:
  containers:
  - name: aula5-container
    image: nginx
    command: ["/bin/sh", "-c", "while true; do echo hello world; sleep 1; done"]
  volumes:
  - name: secrets
    secret:
      secretName: aula5-secret
Para criar o Pod, você pode usar o seguinte comando:

kubectl create -f aula5-pod.yaml
Depois de criar o Pod, você pode acessar os dados do Secret usando o caminho do volume. Por exemplo, o seguinte comando imprime o valor da chave key1 do Secret:

kubectl exec -it aula5-pod -- sh -c "cat /etc/secrets/key1"
Criação e uso de um ConfigMap
Um ConfigMap é um objeto Kubernetes que armazena dados não confidenciais, como configurações, arquivos de configuração e arquivos de log. Os ConfigMaps não são criptografados e podem ser visualizados por usuários e processos não autorizados.

Para criar um ConfigMap, você pode usar o seguinte comando:

kubectl create configmap <configmap-name> --from-literal=key1=value1 --from-literal=key2=value2
Por exemplo, para criar um ConfigMap chamado aula5-configmap com dois valores, key1 e value1 e key2 e value2, você usaria o seguinte comando:

kubectl create configmap aula5-configmap --from-literal=key1=value1 --from-literal=key2=value2
Depois de criar um ConfigMap, você pode usá-lo em um Pod definindo o volume configmap para o Pod. O volume configmap mapeia o ConfigMap para um volume no Pod e o Pod pode acessar os dados do ConfigMap usando o caminho do volume.

Por exemplo, o seguinte YAML define um Pod com um volume configmap que mapeia o ConfigMap aula5-configmap para o volume /etc/config:

apiVersion: v1
kind: Pod
metadata:
  name: aula5-pod
spec:
  containers:
  - name: aula5-container
    image: nginx
    command: ["/bin/sh", "-c", "while true; do echo hello world; sleep 1; done"]
  volumes:
  - name: config
    configMap:
      name: aula5-configmap
Para criar o Pod, você pode usar o seguinte comando:

kubectl create -f aula5-pod.yaml
Depois de criar o Pod, você pode acessar os dados do ConfigMap usando o caminho do volume. Por exemplo, o seguinte comando imprime o valor da chave key1 do ConfigMap:

kubectl exec -it aula5-pod -- sh -c "cat /etc/config/key1"
Trabalhando com Armazenamento Persistente
Explicação sobre Persistent Volumes (PV) e Persistent Volume Claims (PVC)
Um Persistent Volume (PV) é um recurso Kubernetes que fornece armazenamento persistente para


git clone https://github.com/kubernetes/metrics-server.git
Vá para o diretório do Metrics Server:
cd metrics-server
Instale o Metrics Server:
kubectl apply -f install.yaml
Verifique se o Metrics Server está em execução:
kubectl get pods
Você deve ver uma saída como esta:

NAME                                READY   STATUS    RESTARTS   AGE
metrics-server-5789d79745-q652z   1/1     Running   0          1m
