

#Crie um volume chamado my-volume.
docker volume create my-volume


#Monte o volume my-volume em um container.
docker run -v my-volume:/tmp -it ubuntu

#Salve alguns dados no volume.
echo "Hello world" > /tmp/my-file

#Remova o container, mas mantenha o volume.
docker rm -f my-container

#Crie um novo container e monte o volume my-volume.
docker run -v my-volume:/tmp -it ubuntu

#Verifique se os dados que você salvou ainda estão lá.
cat /tmp/my-file
#A saída deve ser:

Hello world
#Como você pode ver, os dados que você salvou no volume my-volume ainda estão lá, mesmo que você tenha removido o container. Isso ocorre porque o volume my-volume é um recurso persistente que existe independentemente do container.
#Docker Networks

# Crie uma rede chamada my-network.
docker network create my-network

# Conecte dois containers à rede my-network e dê-lhes nomes.
docker run -it --net my-network --name my-container-1 ubuntu
docker run -it --net my-network --name my-container-2 ubuntu

# Os containers podem se comunicar entre si usando seus nomes.
# No caso abaixo, você está fazendo o container-1 pingar o container-2.
docker exec -it my-container-1 ping my-container-2

#Crie um arquivo docker-compose.yml que defina duas imagens de contêiner.


version: '3.8'
services:
  web:
    image: nginx
  db:
    image: postgres


#Crie dois containers a partir das imagens definidas no arquivo docker-compose.yml.
#docker-compose up -d
#Os containers serão conectados à mesma rede e poderão se comunicar entre si usando seus nomes.

docker-compose exec web ping db
########################################################################################################
#Docker export
#O comando docker export permite que você exporte um container como um arquivo tarball. É útil quando você quer capturar o estado atual de um container (o sistema de arquivos do container) para transferir para outro sistema, por exemplo.

#Sintaxe básica:


#docker export [OPTIONS] CONTAINER > nome_do_arquivo.tar


#Docker import
#Depois de exportar um container usando docker export, você pode usar o comando docker import para criar uma nova imagem Docker a partir do arquivo tarball. Esta imagem pode ser usada para criar novos containers no sistema atual ou em outros sistemas.

#Sintaxe básica:

#docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]

#Criação e Exportação de um Container:
#Primeiro, vamos criar um container básico do Ubuntu, fazer uma pequena modificação e depois exportá-lo.

# Cria um container Ubuntu e instala o curl
docker run -it --name meu_container ubuntu bash -c "apt-get update && apt-get install -y curl"

# Exporta o container para um arquivo tarball
docker export meu_container > meu_container.tar


#Importação e Verificação da Nova Imagem:
#Depois de exportar o container, vamos importá-lo como uma nova imagem e verificar se a modificação (instalação do curl) ainda está lá.

# Importa o arquivo tarball como uma nova imagem Docker
docker import meu_container.tar minha_nova_imagem:latest

# Cria um novo container a partir da imagem recém-importada e verifica a instalação do curl
docker run minha_nova_imagem curl --version

